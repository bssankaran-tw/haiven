question,llm_response,contexts,ground_truth,metadata,Actual Data Document
what are the Overarching concepts related with Ways of working principles of thoughtworks,"Overarching Concepts within ThoughtWorks' Ways of Working Principles
Transparency

Ensuring all stakeholders and team members have visibility into the processes, progress, challenges, and decisions made. This fosters trust and alignment across the board.
Shared Ownership and Collaboration

Encouraging collective responsibility and cooperation among cross-functional teams to achieve common goals. This principle helps in leveraging diverse skills and perspectives, thereby improving the quality of solutions.
Psychological Safety

Creating an environment where team members feel safe to express their thoughts, ideas, and concerns without fear of negative consequences. This promotes innovation, risk-taking, and continuous improvement.
Deliver Value Sooner to the Business and Customer

Emphasizing the delivery of incremental value early and often to maximize business benefits and customer satisfaction. This approach aids in validating assumptions and adapting based on real feedback.
Rapid and Flexible to Change

Embracing agility to quickly respond to changes in the market, business priorities, or client needs. This ensures that the team can pivot effectively without losing momentum.
Early Identification and Mitigation of Risks and Issues

Proactively identifying potential risks and issues as early as possible to allow timely mitigation and adjustment. This principle reduces the likelihood of project derailments and increases the likelihood of successful delivery.
Faster Decision Making

Implementing processes and practices that enable quick, informed decision-making. This prevents bottlenecks and keeps the project on track.
Better Visibility of Progress

Providing clear, real-time insights into the project's status and development stages. This supports more effective planning, execution, and stakeholder communication.
Delight Customers and End Users

Focused on exceeding customer and end-user expectations by delivering high-quality, valuable software solutions. This can lead to increased customer loyalty and satisfaction.
Support Evolutionary Design, Development, and Delivery

Encouraging iterative and incremental development to evolve solutions over time. This approach accommodates changes and continuous improvements gracefully.
Conclusion
These overarching concepts form the foundation for ThoughtWorks' approach to agile software delivery. They not only enhance project outcomes but also foster a collaborative, transparent, and supportive work environment. By integrating these principles, teams are better equipped to deliver excellent software rapidly and efficiently.","[
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 6Ways of working principlesIntroductionWe apply our best practices and tools while ensuring they are effective and fit within the client’s environment. These practices are based around collaboration, transparency, rapid delivery, feedback, and continuous improvement.Further to the ways of working, some additional overarching concepts that have been proven to help delivery excellence are also embedded. These include transparency, shared ownership and collaboration and psychological safety as explained on the next page. Thoughtworks believes highly collaborative, cross-functional and customer-focussed teams are a key enabler for delivering excellent software rapidly.Our approach combines lean and agile principles with XP engineering practices that we have adapted and enhanced over the years to help teams excel in large organisational settings.Ways of Working PrinciplesBetter understanding of value and business benefitsDeliver value sooner to the business and customerStronger collaboration with the businessRapid and flexible to changeEarly identification and mitigation of risks and issuesFaster decision makingBetter visibility of progressDelight customers and end usersWorking software soonerSupport evolutionary design, development and delivery© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 5Our core valuesIntroductionWe believe ideas and doing the right thing are more important than appearances and backgrounds. Finding technology solutions to solve the challenges facing our clients around the world is at the very heart of the purpose we all share.Our Code of Conduct reflects our values and outlines how we conduct ourselves and treat each other.Thoughtworks proudly and actively seeks to make itself and our industry more reflective and inclusive of the society that we serve, so we come to work as our whole, authentic selves. We abhor and reject discrimination and inequality, and promote diversity in all its forms. We encourage and support each other; and value honesty and transparency. Global first  |  Courageous  |  Inclusivity  |  Cultivation  |  Integrity   Curiosity  |  Pursuit of Excellence  |  Autonomous teams"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 2ContentsIntroduction to Thoughtworks’ agile software delivery● What is the Thoughtworks guide?● Core values● Ways of working principlesDelivery process● Overview of software delivery lifecycle● Discovery phase● Define phase ● Iteration zero● Deliver phase● Iteration and ceremonies● Run and support phaseProject and iteration management● PM sensible default practices ● Scope management● Estimation ● Tracking and reporting● Planning● Risk and issue managementHuman centered design and analysis● Our approach to human centered design● Our approach to analysis ● Users, customers and service receivers● Identify your users and customers needs● Identify user and customer journeys● Identify user and customer product experiences● Identifying and slicing work● Identifying features● Story lifecycle● User stories● User story template● Technical user stories● Spikes, tasks and decisions● Do’s and Don’ts of story writing● Identifying how and when to split a user story● Our BA sensible defaults practicesAccessibility● Accessibility at Thoughtworks ● Accessibility sensible defaultsEngineering and architecture● Engineering sensible default practices● Frequent and Continuous Integration● Test driven development● Pair development● Build security in● Fast automated build● Automated deployment pipeline● Early and continuous deployment● Quality and debt effectively managed● Build for production● Continuous integration● Continuous delivery● Parallel streams of work● Testing in the CI / CD pipeline● How we ensure quality?● Automated testing● Testing strategy guiding principles● Defect prevention● Defect detection● Automated testing scope● Functional test pyramid● Infrastructure as code● Evolutionary architecture● Automated tests for architecture propertiesSecurity● Our core principles for building secure software● Our approach to security● Creating a security culture● Shifting security left● Threat modeling● Secure delivery checklist● DevSecOps● Build security in ● Approach security with a risk-based mindset● Adopt practices for creating responsible technology● Make security everyone’s responsibilityAppendix● Glossary of terms"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 62Human centered design and analysis62© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 4Navigating this documentThis guide has been divided into eight sections. It starts with an overview of the whole software delivery lifecycle and its phases. The sections then dive deep into the different disciplines of project and iteration management; design and analysis; and engineering and architecture. Introduction to Thoughtworks’ agile software deliverySets the scene for the way we deliver software at Thoughtworks.Project and Iteration managementHow we successfully manage our delivery. Covering our PM sensible default practices, scope management, estimation, tracking, reporting, planning and RAIDs.AccessibilityOur approach to accessibility at Thoughtworks. Covering what accessibility is and our accessibility sensible default practices.Engineering and architectureOur approach to engineering and architecture. Covering our Engineering sensible default practices, CI/CD, approach to quality, testing, defect detection, infrastructure as code and evolutionary architecture. SecurityOur approach to security. Covering creating a security culture, shifting security left, threat modeling, secure delivery checklist, DevSecOps and our security sensible defaults.Run and supportOur approach to operating and evolving systems. Delivery processAn overview of the software delivery lifecycle and its phasesIntroductionAppendix - glossary of termsDefinitions and hierarchy relationship of all terminology usedHuman centred design and analysisOur approach to design and analysis at Thoughtworks. Covering identifying users and needs, customer journeys, identifying and slicing the work and story lifecycle."",
]","Overarching concepts related with Ways of working principles of thoughtwork are as follows
Transparency, shared ownership & Collaboration : It encourages each team member to feel responsible for the quality of the whole, ensures faster and effective collaboration eliminating bottelnecks and hierarchical silos and a sense of shared ownership promoting diffusion of knowledge.
Psychological safety : Builds a culture of psychological safety helps teams share ideas, innovate, resolve conflict and perform overall as everyone in team is open to honest conversations about team’s sensitive issues.","Prompt: Chat with Haiven
Document: The Thoughtworks Guide to Agile Software Delivery","Transparency, shared ownership : Teams typically adopt conventions governing who is allowed to modifysome configuration, customisation,source code, documentation or other deliverables that were originally written by another, often referred to as “ownership”. These conventions can be written and explicit, merely oral, or entirely implicit. Collective ownership,as the name suggests, is the explicit convention that “every” team member is not only allowed, but in fact has a positive duty, to make changes to “any” code or document file as necessary. Either to complete a task, to repair an error, to improve the overall structure or to build on an idea. This also applies to the decision making process including architectural, product, team structure
and process decisions. 

Expected benefits A collective ownership policy:
● reduces the risk that the absence (or unavailability) of any one team member will stall or slow work ordecisions making
● increases the chance that the overall design, outputs and outcomes results from sound decisions, rather than from social structure, often defined by silos or hierarchy
● is a favorable factor in the diffusion of knowledge and collaboration
encourages each team member to feel responsible for the quality
of the whole.
For collective ownership to be possible, the organisation must be open to, or already using, collaborative tools for documentation, presentations, planning, and recording decisions and access to all elements of delivery.
Psychological safety :Building a culture of psychological safety helps teams share ideas, innovate, resolve conflict and perform overall.
A safety check during team retrospectives surfaces any issues with safety. This provides a timely reminder to everyone involved that without safety, real issues cannot be raised which can foster underperformance.
Further to safety checks, as discussed in this study teams can also ask
themselves:
1. If I take a chance, and mess up, will it be held against me?
2. Does our team have a strong sense of culture that can be hard for new people to join?
3. Is my team slow to offer help to people who are struggling?
4. Does using my unique skills and talents come second to the objectives of the team?
5. Is it uncomfortable to have open honest conversations about our team’s sensitive issues?"
Why should we have Frequent and Continuous Integration,"Benefits of Frequent and Continuous Integration
Frequent and Continuous Integration (CI) offer several key benefits, which are critical to ensuring efficient, effective, and high-quality software delivery. These include:

Fast Feedback

Early detection of incompatible changes, allowing quick identification and resolution of issues.
Encourages refactoring to maintain simplicity and cleanliness of code.
Reduced Deployment Risk

Smaller change sets reduce the complexity and risk associated with deployments.
Easier debugging due to minimal changes and more recent work context.
Improved Team Efficiency and Flow

Avoids complex merges by regularly integrating changes into the main branch.
Keeps the main branch in a production-deployable state, ensuring immediate readiness for deployment.
Short-lived development branches prevent stale branches and reduce overhead.
Key Continuous Integration Practices
To achieve effective CI, implement the following practices:

Maintain a Single Source Repository: All team members commit and push changes to one central repository.
Automate the Build: Ensuring builds are automated for consistency and reliability.
Self-Testing Builds: Automate tests within the build process to verify functionality.
Everyone Commits Daily: Frequent commits ensure that changes are continuously integrated.
Integration Machines: Ensure every commit builds on an integration machine to validate changes.
Immediate Fixes for Broken Builds: Any break in the build should be addressed urgently to maintain integrity.
Fast Builds: Aim for quick build times to allow frequent integrations and rapid feedback.
Test in Production-like Environments: Validate builds in environments closely mirroring production.
Transparency: Provide visibility into the build status for all team members.
Automate Deployment: Streamline deployment processes for efficiency and repeatability.
Implementing Fast and Verified Automated Builds
Ensure your automated build and test processes:

Provide immediate feedback post-push to confirm production-deployable status.
A pre-push local build can assure >90% confidence in the stability of the new changes.
Are visible to the whole team, prompting quick responses to any failures.
Are optimized for speed and reliability, with focused efforts to address build ‘flakiness’.
Adoption of Continuous Deployment/Delivery
Practices for CD/CD include:

Continuous Deployment: Each code push triggers an automated deployment to production.
Continuous Delivery: Code remains deployable, with deployments scheduled frequently, e.g., weekly or on-demand.
Early Deployments: Initial production deployments occur in the first days/weeks of the project.
Frequent Environment Deployments: Regular deployments to all environments to ensure readiness.
Monitor Key Metrics: Track stability and throughput metrics for informed decisions.
Summary
Frequent and Continuous Integration, complemented by robust Continuous Deployment/Delivery practices, facilitates early problem detection, improves team efficiency, and minimizes deployment risks, leading to successful and sustainable software delivery.","[
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 88A. Each team member frequently integrates changes from their working copy to a main branch. Usually each person integrates at least daily, leading to multiple integrations per day.B. Any development branch lives for hours only, never for days/weeks.C. Integration to main can happen by many means, as long as it is frequent. The simplest way is to generally push changes directly to the main branch, and have practices in place to make that possible.D. The main branch is kept in a production-deployable state, and the team knows how to safely merge work-in-progress.Frequent and Continuous IntegrationWhy?Continuous, frequent integration delivers fast feedback, so you find out about incompatible changes early. The confidence and safety net from this fast feedback encourages refactoring to maintain simplicity. Frequent integration helps keep change sets small, which reduces deployment risk and makes debugging easier. While it sometimes requires extra effort to make work-in-progress integratable, it increases the overall team efficiency and flow by avoiding complex merges, and achieving higher simplicity in the change and deployment processes.© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual PropertyEngineering and architecture"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 97Continuous Integration (CI) is a software development practice where members of a team integrate their work by committing to and pushing their main line frequently per day, leading to multiple integrations per day. Having developers regularly integrate code into a shared code repository identifies and locates problems early. On the whole the greatest and most wide ranging benefit of Continuous Integration is reduced risk. Continuous Integration doesn't get rid of bugs, but it does make them dramatically easier to find and remove. If you introduce a bug and detect it quickly it's far easier to get rid of. Since you've only changed a small bit of the system, you don't have far to look. Since that bit of the system is the bit you just worked with, it's fresh in your memory - again making it easier to find the bug. Continuous integrationEngineering and architectureYou can also use diff debugging - comparing the current version of the system to an earlier one that didn't have the bug. As a result projects with CI tend to have dramatically less bugs, both in production and in process.If a team uses Feature Branching, they can only integrate when a feature is complete, which limits how often they can integrate. With Continuous Integration, developers may integrate whenever they have made some progress, and their code is production ready. Developers using CI should have no more than a day's work sitting unintegrated in their local workspace, usually much less.More information on Continuous integration can be found on martinfowler.comThe key practices that make up effective CI are:● Maintain a Single Source Repository● Automate the Build● Make Your Build Self-Testing● Everyone Commits To the Mainline Every Day● Every Commit Should Build the Mainline on an Integration Machine● Fix Broken Builds Immediately● Keep the Build Fast● Test in a Clone of the Production Environment● Make it Easy for Anyone to Get the Latest Executable● Everyone can see what's happening● Automate Deployment"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 92A. After pushing a code change, an automated build and test process provides feedback that the build is production-deployable in minutes. B. A team member can run a local pre-push build that provides >90% of confidence that the build will not fail.  C. The whole team is aware of the build and test status at all times, and respond quickly to fix any failureD. The team monitors the build duration and reliability, and prioritises work to speed up builds and address any build or test ‘flakiness’.Fast and verified automated buildEngineering and architectureWhy?We need very fast feedback to know that changes we’re making have not introduced any defects.  That build process must be fully automated so that it delivers repeatability and we don’t have late discovery of differences caused by manual steps. Ensuring the the build is reliable and fast allows us to introduce change in small batches and get earlier integration and feedback."",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 94A. Continuous Deployment is practiced, meaning each code/config push triggers an automated deployment to production, once checks and tests have completed.B. When Continuous Deployment is not feasible, the code is always in a deployable state (= Continuous Delivery), and production deployments are performed at least weekly, preferably on-demand as stories/tasks are completedC. The first production deployment is performed in the first days/weeks of a new project, not deferred until late in delivery.  D. The team deploys to all environments, including production, on a frequent basis.E. No component goes undeployed for more than a month, even if no change has been required. F. The “4 Key Metrics” are monitored (manually or automatically) to measure stability and throughput.Early and continuous deploymentEngineering and architectureWhy?Deploying early to production gives us confidence that the system is production-ready and we don’t have significant work (and re-work) hidden in the backlog. We also find any problems early (fast feedback). Deploying frequently (whether features are ready to release or not, whether there were changes or not) brings forward any problems with deployment (repeatability). It  increases confidence in automation and processes, and thereby reduces deployment risk."",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 98Continuous Delivery (CD) is a software development discipline where you build software in such a way that the software can be released to production at any time. You’re doing continuous delivery when:● Your software is deployable throughout its lifecycle● Your team prioritizes keeping the software deployable over working on new features● Anybody can get fast, automated feedback on the production readiness of their systems any time somebody makes a change to them● You can perform push-button deployments of any version of the software to any environment on demandContinuous DeliveryEngineering and architectureYou achieve continuous delivery by continuously integrating the software done by the development team, building executables, and running automated tests on those executables to detect problems. Furthermore you push the executables into increasingly production-like environments to ensure the software will work in production. To do this you use a Deployment Pipeline. The picture below illustrates a typical pipeline.The key test is that a business sponsor could request that the current development version of the software can be deployed into production at a moment's notice - and nobody would bat an eyelid, let alone panic.More information on CD can be found on martinfowler.comPerformance testingSecurity testingInformation radiator / MonitoringUnit testing Component testingConsumer driven contract testingEnd-to-end functional testing Exploratory testingUser acceptance testingKeyProductionCode repoDev box DeployablesContinuous Integration Pre-prodCI Pre prod Prod"",
]","Continuous, frequent integration delivers fast feedback, identify incompatible changes early. It encourages refactoring to maintain simplicity reduces deployment risk and makes debugging easier. It increases the overall team efficiency and flow by avoiding complex merges, and achieving higher simplicity in the change and deployment processes.","Prompt: Chat with Haiven
Document: The Thoughtworks Guide to Agile Software Delivery","Continuous, frequent integration delivers fast feedback, so you find out about incompatible changes early. The confidence and safety net from this fast feedback encourages refactoring to maintain simplicity. Frequent integration helps keep change sets small, which reduces deployment risk and makes debugging easier. While it sometimes requires extra effort to make work-in-progress integratable, it increases the overall team efficiency and flow by avoiding complex merges, and achieving higher simplicity in the change and deployment processes."
whats the guiding principle of thoughtworks Testing strategy,"Based on the provided context regarding Thoughtworks' Testing Strategy, the guiding principles are:

Shared Responsibility:

Everyone is responsible for testing and quality.
Quality is a collective responsibility across all roles in the team.
Test Automation:

Testing should be automated where feasible, considering constraints of the technology stack.
Automation includes functionality, performance, accessibility, and security.
Manual testing is reserved for exploratory testing, sign off, and scenarios where automation is infeasible.
Defect Prevention:

Focus on defect prevention to build quality into software.
Emphasize activities that prevent defects from occurring rather than just detecting them post occurrence.
The entire team is involved in defect prevention, aiming to resolve problems early before they impact the application.
These principles are designed to ensure quality software delivery with a high bar for management, lower delivery cost, and delivering customer value. Automated testing is central to their continuous deployment practice, enabling high confidence in software builds with efficient testing processes.","[
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 104Our Testing Strategy is guided on three guiding principles: shared responsibility, test automation and defect prevention.Shared responsibility Everyone is responsible for testing and quality.Test automation Where feasible, within the constraints of the technology stack, testing should be automated. This includes functionality, performance, accessibility and security. Manual testing should be reserved for exploratory testing, sign off and anywhere it is infeasible to automate within the constraints of the technology stack.Testing strategy guiding principlesEngineering and architectureDefect PreventionTo build quality into software it is not enough to only target defect detection (which is finding defects after they have happened). We must include and focus on defect prevention (making sure the defects do not happen in the first place or the defects are removed / reduced before making their way into the software product).Defect prevention plays a major and crucial role in the software development process. It ensures that problems get resolved early on without even making it to the application and it can only be achieved if considered a responsibility of the entire team. The recommended testing strategy places the emphasis on activities associated with defect prevention.Defect PreventionDefect Detection"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 101How we ensure quality?© 2021 Thoughtworks Engineering and architectureAt Thoughtworks we have a high bar for managing the software quality for our clients. Our practices are based on the following principles :● Take product(s) to the market as quickly as possibleDelivering well tested code incrementally, early and often with a focus on test automation. “Shift test activities to the left” ensuring high quality software is delivered with shorter time to market ● Minimise the cost of delivery Lowering the cost of delivery by “baking quality into the process” and uncovering defects earlier. Giving priority and investing in open source testing tools and technology. Highlight risks, enable the team with ways to recover from an issue faster. Regularly evaluating process improvements● Giving the customer the best possible experienceWith the aim to provide customer value, testing is user centric, by embedding feedback from any user research and production metrics into the acceptance criteria and test cases© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 103Automated testing is the cornerstone of continuous deployment. With continuous deployment, the build pipeline automatically tests new versions of software and deploys successful builds to production environments without human intervention. The quality of the automated tests governs the confidence around each build. The testing strategy describes the approach to testing to maximise the quality of the test suite while minimising the time and effort required.Automated testingEngineering and architectureIn this section we recommend a testing strategy that should be adopted for the successful delivery of a project. The testing strategy describes the:● Guiding principles● Functional testing scope● Automated testing playbooks © 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 102Value based testing Assuring the value to the business and end user through user research, prototyping, A/B testing and ensuring this understanding is baked while testing features. Champion qualityAdvocating to have the whole team across roles to think about testing and quality, to ensure we have various perspectives and the responsibility is shared, while the Quality Analysts (QAs) are still accountable. This is done by QAs extensively collaborating with different roles at various stages in the SDLC spreading the awareness of quality in the organisation and ensuring everyone is thinking about it from ideation to when the customers start using the product.Continuous testingShift quality left approach where we start validating the system right from conception and development by verifying assumptions in requirements, highlighting any risks, reviewing the designs, identifying edge cases,impact analysis based on dependencies,  strategising testing and cross functional requirements based on the architecture. Shift quality right approach by validating the system in production through controlled experiments, observability (metrics), monitoring and alerting.Exploratory testingExploring the system with domain and user context in mind helps in evolving the product by gaining insights into how it could be used and the consequences of using it in a way that was not originally intended. Uncovering potential risks in the product is the core differentiator that a Quality Analyst brings to the team by thinking outside the box, with an inquisitive mindset. Repeatable testingTest Automation through Continuous Integration for features is at the core of our Quality Assurance. This gives the whole team confidence in Continuous Quality Delivery. We advocate pragmatic automation of tests, based on cost vs value across different layers of the tech stack, without duplication. This ensures fast and accurate feedback, fundamental to iterative development.Continuously optimise process and techKeeping on top of identifying gaps in processes and suggesting process improvements.Periodically reviewing the implemented test tools and frameworks. Continuously improving test code quality, deployment strategies.See more on our QA SDP pageHow we ensure qualityEngineering and architecture"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 6Ways of working principlesIntroductionWe apply our best practices and tools while ensuring they are effective and fit within the client’s environment. These practices are based around collaboration, transparency, rapid delivery, feedback, and continuous improvement.Further to the ways of working, some additional overarching concepts that have been proven to help delivery excellence are also embedded. These include transparency, shared ownership and collaboration and psychological safety as explained on the next page. Thoughtworks believes highly collaborative, cross-functional and customer-focussed teams are a key enabler for delivering excellent software rapidly.Our approach combines lean and agile principles with XP engineering practices that we have adapted and enhanced over the years to help teams excel in large organisational settings.Ways of Working PrinciplesBetter understanding of value and business benefitsDeliver value sooner to the business and customerStronger collaboration with the businessRapid and flexible to changeEarly identification and mitigation of risks and issuesFaster decision makingBetter visibility of progressDelight customers and end usersWorking software soonerSupport evolutionary design, development and delivery© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property"",
]","Testing Strategy is guided on three guiding principles: 
shared responsibility, test automation and defect prevention.

Shared responsibility :Everyone is responsible for testing and quality.
Test automation: Where feasible, within the constraints of the technology stack, testing should be
automated.
Defect Prevention : making sure the defects do not happen in the first place or the defects are removed / reduced before making their way into the software product","Prompt: Chat with Haiven
Document: The Thoughtworks Guide to Agile Software Delivery","Our Testing Strategy is guided on three guiding principles: shared responsibility, test automation and defect prevention. Shared responsibility Everyone is responsible for testing and quality. Test automation Where feasible, within the constraints of the technology stack, testing should be automated. This includes functionality, performance, accessibility and security. Manual testing should be reserved for exploratory testing, sign off and anywhere it is infeasible to automate within the constraints of the technology stack. Testing strategy guiding principles Engineering and architecture Defect Prevention To build quality into software it is not enough to only target defect detection (which is finding defects after they have happened). We must include and focus on defect prevention (making sure the defects do not happen in the first place or the defects are removed / reduced before making their way into the software product). Defect prevention plays a major and crucial role in the software development process. It ensures that problems get resolved early on without even making it to the application and it can only be achieved if considered a responsibility of the entire team. The recommended testing strategy places the emphasis on activities associated with defect prevention."
Can you explain Threat modelling process recommended at Thoughtworks?,"Thoughtworks Threat Modelling Process

Set the Context:

Create a shared map of the systems or processes that will be the focus of the threat model for the session.
This helps establish a common understanding among all participants.
Identify Threats:

Brainstorm potential worst-case scenarios based on the established context.
Utilize models like the CIA Triad (Confidentiality, Integrity, Availability) and STRIDE (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privileges) to prompt ideas and discussions.
Determine Controls:

Identify existing protections for the threatened areas in the systems.
Highlight any areas where there may be gaps in protection.
Prioritize and Fix:

Estimate the likelihood and impact of identified threats.
Decide on the urgency of each threat.
Develop a plan for mitigation or prevention.
Guidance for Implementation:

Regular Sessions: Threat modelling should be performed regularly as part of the software development process.
Broad Participation: Include all roles involved in the project—developers, QAs, BAs, UX designers, security teams, and other stakeholders—to ensure diverse perspectives are represented.
Specialist Support: Augment team capabilities with security specialists as needed for threat modelling, establishing security baselines, integrating security thinking into agile processes, and developing security practices.
Threat Mitigation Integration:

Identified threats should be triaged and prioritized.
The prioritized threat mitigations should be integrated into the team’s backlog.
Continuous Security: Thoughtworks advocates for continuous security practices by embedding security in every stage of the software delivery lifecycle, ensuring faster feedback on code and design. This includes:

Early and Frequent Testing: Security vulnerabilities should be tested early and often, and added to automated pipelines.
Secret Management: Use secret management services and continuous scanning for secrets in the code.
Baseline Security Controls: Implement baseline security controls, such as OWASP ASVS and Thoughtworks' Secure Delivery Checklist.
Incident Management: Ensure incidents are addressed with low turnaround time, proper monitoring, and effective patching strategies.
Access Control: Information should be captured on a need-to-know basis, with access control managed by the principle of least privilege.
Data Protection: Sensitive data at rest and in transit should be protected from exposure using appropriate encryption measures.
Security Framework Integration:

Securing Path to Production: Ensure security coverage across the pipeline using architecture, automated guardrails, and continuous risk management.
Compliance: Integrate compliance as code to confidently operate in highly regulated environments.
Psychological Safety: Foster a partnership mentality with the InfoSec team to encourage proactive reporting of concerns and incidents.
Reference for Further Information: Martin Fowler's site on threat modelling and security practices.","[
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 118Threat modelling processCreate a shared map of the systems or processes that are the focus of the threat model for the session.Set the contextIdentify threatsBrainstorm worst-case scenarios based on the established context, using models like the CIA Triad and STRIDE to prompt ideas and discussion.Determine controlsIdentify any protections for these threats that might already be in place in the systems, and where there may be gaps.Prioritiseand fixEstimate likelihood and impact of identified threats, and decide on their urgency. Create a plan for mitigation or prevention.Threat modellingSecurityThreat modelling (also known as “evil brainstorming”) is a process which enables software delivery teams to enumerate the threats to their system and develop stories that address these threats.The goal of these sessions is to create a shared understanding of what could go wrong.Threat modelling sessions should be run as a regular part of the software development process and generally follow the approach outlined below. These sessions can have a variety of focal points: either a whole-of-system view, or a deep-dive on one particular feature in development.These kinds of workshops work best when all roles involved in the project participate, including developers, QAs, BAs, UX designers, security team members, and other project stakeholders. This allows the workshop to consider as many points of view as possible, and ensures that all stakeholders’ concerns and perspectives are adequately represented.Further information can be found on Martin Fowler’s site."",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 91A. Security vulnerabilities (including dependencies) are tested for early and often, and added to automated pipelines wherever possibleB. Secrets are managed via secret management services, and there is continuous scanning for secrets in the code.C. Threat modelling is performed regularly on the architecture and during feature development. The identified threats are triaged, and the prioritised threat mitigations are in team’s backlog.D. Incidents are addressed with a low turnaround time, with appropriate monitoring, patching and roll-back/-forward strategies in placeE. Information is captured on a need-to-know basis and access control is managed with the principle of least privilege. F. All sensitive data at rest and in transit are protected from exposure, for example with appropriate encryptionG. A baseline of security controls is implemented, e.g. OWASP ASVS and Thoughtworks' Secure Delivery ChecklistBuild security inEngineering and architectureWhy?We need to identify potential security risks earlier, to make quicker and tighter decisions. Building security practices through the phases of development lifecycle will allow faster feedback on code and design. Furthermore, automation can help deliver repeatability, also reducing the continuous dependency on a security SME for regressive actions, allowing further time for risk-based analysis and security gates."",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 115Thoughtworks favours a continuous approach to security, that builds security in at every stage of the software delivery lifecycle. Build Security InThoughtworks’ approach is to embed the capabilities to deliver secure applications and architectures within software delivery teams. Build security in is one of our engineering sensible default practices.Bringing external perspectiveWe augment team capabilities where appropriate with security specialists to assist delivery teams in:● threat modelling;● establishing a security baseline;● incorporating security thinking into agile processes;● providing a risk-based security assessment; and● developing security practices.Incident managementOur InfoSec team supports Thoughtworkers by taking an active interest in what goes on at our clients in terms of security incidents, and helping teams resolve things directly, rather than only focusing on our own estate.For project delivery, we continuously assess security-related functionalities and practices.Our approach to securitySecurityPsychological safety and trustA key part to creating a successful security practice is ensuring that delivery teams see InfoSec as a partner, not the police. This means people feel more comfortable to proactively bring up concerns and incidents instead of hiding them until the last moment.It is important to the InfoSec team that all reports are handled fairly and with the assumption of good intent.Securing path to productionOur core practices for securing the path to production include:● embedding security coverage across the pipeline;● using threat modelling to identify risks and possible mitigations;● wherever possible, systematically mitigating or eliminating risks through architecture, automated guardrails and tooling, rather than relying on human review and diligence;● integrating tools, depending on various factors such as features and licensing;● creating accountability in teams to  gather and triage tool feedback;● continuous risk management;● compliance as code in order to operate confidently in highly regulated environments."",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 122Build security inSecurityDeploy & release We are only deploying to production changes of acceptable riskAnalyzeFor every feature we are identifying security scope and acceptance criteria in user stories in the product backlogSecurityArchitectureWe have an architectural vision that protects, detects and responds to relevant threats and allows for recovery Capability & motivationWe have the right security capabilities across all roles in the team to maintain acceptable riskRisks identifiedWe have information about threats, compliance and stakeholder tolerance to support security informed product decisionsTeam’s path to production (need to do)CodeIn every commit, we are building security into application code, data models, pipelines, configuration or infrastructure as codeLeadership and coordination (need to have)TestIn every iteration we are finding and fixing vulnerabilities and weaknesses using tooling and exploratory testingBuildFor every commit, we are using pipelines and automation as a force multiplier to find vulnerabilitiesOperate and monitorOur production environment continuously protects, detects, responds and recovers from threats and incidentsPractises & ToolsWe have tools and guidance on practises to identify vulnerabilities and security features"",
""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 9Our delivery modelDelivery processthe journey at any point in the framework, depending on its maturity, and releases of working code can be made at different phases of the lifecycle.While smaller engagements tend to move through the phases once and in sequence, larger engagements often have services engaged at all phases of the lifecycle for different parts of the solution. In addition, experience has shown that risks associated with delivery for different levels of project complexity require specific people, skills, experience levels, and methods in order to be properly mitigated.The Thoughtworks methodology is based on a lean, agile and Extreme Programming (XP) delivery model and built on extensive experience successfully delivering software. The model combines lean and agile principles and hypothesis-driven design and development to continuously deliver thin slices of valuable working code. This means delivering production ready, end-to-end functionality at the end of every iteration.While the model represents the sequential progress of a product lifecycle, an initiative can start and exit Figure: Lean Agile Delivery Model"",
]","Threat modelling is a process which enables software delivery teams to enumerate the threats to their system and develop stories that address these threats. Threat modelling is performed regularly on the architecture and during
feature development. The identified threats are triaged, and the prioritised threat mitigations are in team’s backlog. Threat modelling process is composed of : 
Set the context :Create a shared map of the systems or processes that are the focus of the threat model for the session.
Identify threats :Brainstorm worst-case scenarios based on the established context, using models like the CIA Triad and STRIDE to prompt ideas and discussion.
Determine controls : Identify any protections for these threats that might already be in place in the systems, and where there may be gaps.
Prioritise and fix: Estimate likelihood and impact of identified threats, and decide on their urgency. Createa plan for mitigation or prevention.","Prompt: Chat with Haiven
Document: The Thoughtworks Guide to Agile Software Delivery","Threat modelling (also known as “evil brainstorming”) is a process which enables software delivery teams to enumerate the threats to their system and develop stories that address these threats.
Set the context :Create a shared map of the systems or processes that are the focus of the threat model for the session.
Identify threats :Brainstorm worst-case scenarios based on the established context, using models like the CIA Triad and STRIDE to prompt ideas and discussion.
Determine controls : Identify any protections for these threats that might already be in place in the systems, and where there may be gaps.
Prioritise and fix: Estimate likelihood and impact of identified threats, and decide on their urgency. Createa plan for mitigation or prevention."