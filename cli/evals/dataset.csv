user_input,reference_contexts,reference,synthesizer_name
What Thoughtworks guide about?,['© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 1\n© 2021 Thoughtworks \nThe \nThoughtworks \nguide to agile \nsoftware delivery\n'],The Thoughtworks guide is about agile software delivery.,single_hop_specifc_query_synthesizer
What is the approach of Thoughtworks to human centered design and analysis?,"['© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 2\nContents\nIntroduction to Thoughtworks’ agile \nsoftware delivery\n● What is the Thoughtworks guide?\n● Core values\n● Ways of working principles\nDelivery process\n● Overview of software delivery lifecycle\n● Discovery phase\n● Define phase \n● Iteration zero\n● Deliver phase\n● Iteration and ceremonies\n● Run and support phase\nProject and iteration management\n● PM sensible default practices \n● Scope management\n● Estimation \n● Tracking and reporting\n● Planning\n● Risk and issue management\nHuman centered design and analysis\n● Our approach to human centered design\n● Our approach to analysis \n● Users, customers and service receivers\n● Identify your users and customers needs\n● Identify user and customer journeys\n● Identify user and customer product \nexperiences\n● Identifying and slicing work\n● Identifying features\n● Story lifecycle\n● User stories\n● User story template\n● Technical user stories\n● Spikes, tasks and decisions\n● Do’s and Don’ts of story writing\n● Identifying how and when to split a user \nstory\n● Our BA sensible defaults practices\nAccessibility\n● Accessibility at Thoughtworks \n● Accessibility sensible defaults\nEngineering and architecture\n● Engineering sensible default practices\n● Frequent and Continuous Integration\n● Test driven development\n● Pair development\n● Build security in\n● Fast automated build\n● Automated deployment pipeline\n● Early and continuous deployment\n● Quality and debt effectively managed\n● Build for production\n● Continuous integration\n● Continuous delivery\n● Parallel streams of work\n● Testing in the CI / CD pipeline\n● How we ensure quality?\n● Automated testing\n● Testing strategy guiding principles\n● Defect prevention\n● Defect detection\n● Automated testing scope\n● Functional test pyramid\n● Infrastructure as code\n● Evolutionary architecture\n● Automated tests for architecture \nproperties\nSecurity\n● Our core principles for building secure \nsoftware\n● Our approach to security\n● Creating a security culture\n● Shifting security left\n● Threat modeling\n● Secure delivery checklist\n● DevSecOps\n● Build security in \n● Approach security with a risk-based \nmindset\n● Adopt practices for creating responsible \ntechnology\n● Make security everyone’s responsibility\nAppendix\n● Glossary of terms']","Thoughtworks' approach to human centered design and analysis involves identifying the needs of users and customers, their journeys, and their product experiences. It also includes identifying and slicing work, identifying features, and managing the lifecycle of user stories, including technical user stories, spikes, tasks, and decisions. They also provide guidelines on the do's and don'ts of story writing and how and when to split a user story.",single_hop_specifc_query_synthesizer
What is the role of Asia in the Thoughtworks Guide?,"[""© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 3\nWhat is \nThe Thoughtworks Guide?\nIntroduction\nThis guide is intended to be used in \na few different ways. First, if you are \nnew to Thoughtworks - welcome! \nThis guide should be a valuable source \nfor your onboarding, and should provide \na summary of the tools and techniques \nthat you will soon be using regularly. \nSecondly, if you are a Thoughtworker, \nlooking for a way to explain some of our \npractices to clients, this guide should \ngive you lots of material to use.\nLastly, if you are a new client - hello! \nIn this guide, you will read about some \nof the default practices and approaches \nthat Thoughtworks has established and \nuses to deliver great outcomes.  This \nisn't a rule book, and we adapt our \nprocesses to meet the needs of \ndifferent contexts, including your own \nexisting practices. \nAs one of the original pioneers of agile, \nour practices are always evolving.\nWe partner with client delivery teams,\nor take full ownership through \na Thoughtworks team, to build the \ntechnology assets needed to transform \nbusiness; be that new products and \ncapabilities, or the modernization of \nexisting, legacy systems. \nWe help our clients embrace a modern \napproach to engineering excellence, \nensuring fast, frequent and high-quality \nvalue delivery. We build architectures \nthat support continual change and fast \nreactions to new business conditions.\nOver the last 30 years, Thoughtworks \nhas evolved and fine tuned our \npractices and process. While some of \nthese have been adapted from agile \nmethods like Lean and XP, a lot of these \npractices have been home-grown at \nThoughtworks and sent out into the \nworld.\nIn The Thoughtworks guide to agile \nsoftware delivery, we capture the \npractices and processes that we \nregularly use on our projects. ""]",The context does not provide any information about the role of Asia in the Thoughtworks Guide.,single_hop_specifc_query_synthesizer
What is the approach to design and analysis at Thoughtworks?,"['© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 4\nNavigating this document\nThis guide has been divided into eight sections. It starts with an overview of the \nwhole software delivery lifecycle and its phases. The sections then dive deep into \nthe different disciplines of project and iteration management; design and analysis; \nand engineering and architecture. \nIntroduction to Thoughtworks’ agile software delivery\nSets the scene for the way we deliver software at Thoughtworks.\nProject and Iteration management\nHow we successfully manage our delivery. Covering our PM sensible default \npractices, scope management, estimation, tracking, reporting, planning and RAIDs.\nAccessibility\nOur approach to accessibility at Thoughtworks. Covering what accessibility is and \nour accessibility sensible default practices.\nEngineering and architecture\nOur approach to engineering and architecture. Covering our Engineering sensible \ndefault practices, CI/CD, approach to quality, testing, defect detection, \ninfrastructure as code and evolutionary architecture. \nSecurity\nOur approach to security. Covering creating a security culture, shifting security left, \nthreat modeling, secure delivery checklist, DevSecOps and our security sensible \ndefaults.\nRun and support\nOur approach to operating and evolving systems. \nDelivery process\nAn overview of the software delivery lifecycle and its phases\nIntroduction\nAppendix - glossary of terms\nDefinitions and hierarchy relationship of all terminology used\nHuman centred design and analysis\nOur approach to design and analysis at Thoughtworks. Covering identifying users \nand needs, customer journeys, identifying and slicing the work and story lifecycle.']","The approach to design and analysis at Thoughtworks involves identifying users and needs, mapping out customer journeys, identifying and slicing the work, and managing the story lifecycle.",single_hop_specifc_query_synthesizer
What does the term 'Global first' mean in the context of Thoughtworks' core values?,"['© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 5\nOur core values\nIntroduction\nWe believe ideas and doing the right \nthing are more important than \nappearances and backgrounds. Finding \ntechnology solutions to solve the \nchallenges facing our clients around the \nworld is at the very heart of the purpose \nwe all share.\nOur Code of Conduct reflects our values \nand outlines how we conduct ourselves \nand treat each other.\nThoughtworks proudly and actively \nseeks to make itself and our industry \nmore reflective and inclusive of the \nsociety that we serve, so we come to \nwork as our whole, authentic selves. \nWe abhor and reject discrimination \nand inequality, and promote diversity \nin all its forms. We encourage and \nsupport each other; and value honesty \nand transparency. \nGlobal first  |  Courageous  |  Inclusivity  |  Cultivation  |  Integrity   \nCuriosity  |  Pursuit of Excellence  |  Autonomous teams\n']",The context does not provide a specific definition or explanation for the term 'Global first' in relation to Thoughtworks' core values.,single_hop_specifc_query_synthesizer
How does Intellectual Property 122's security practices and Intellectual Property 106's automated regression tests work together to maintain software security?,"['<1-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 122\nBuild security in\nSecurity\nDeploy \n& release \nWe are only deploying \nto production changes \nof acceptable risk\nAnalyze\nFor every feature we \nare identifying security \nscope and acceptance \ncriteria in user stories \nin the product backlog\nSecurity\nArchitecture\nWe have an \narchitectural vision \nthat protects, detects \nand responds to \nrelevant threats and \nallows for recovery \nCapability & \nmotivation\nWe have the right \nsecurity capabilities \nacross all roles in the \nteam to maintain \nacceptable risk\nRisks \nidentified\nWe have information \nabout threats, \ncompliance and \nstakeholder tolerance to \nsupport security \ninformed product \ndecisions\nTeam’s path to production (need to do)\nCode\nIn every commit, we \nare building security \ninto application code, \ndata models, pipelines, \nconfiguration or \ninfrastructure as code\nLeadership and coordination (need to have)\nTest\nIn every iteration we \nare finding and fixing \nvulnerabilities and \nweaknesses using \ntooling and exploratory \ntesting\nBuild\nFor every commit, we \nare using pipelines and \nautomation as a force \nmultiplier to find \nvulnerabilities\nOperate and \nmonitor\nOur production \nenvironment \ncontinuously protects, \ndetects, responds and \nrecovers from threats \nand incidents\nPractises & \nTools\nWe have tools and \nguidance on practises to \nidentify vulnerabilities \nand security features \n', '<2-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 106\nAutomated regression tests\nBy creating automated acceptance \ntests for each requirement as it is being \ndeveloped, an automated regression \ntest suite is created organically. \nAutomated functional tests are \ncontinuously run in the CI pipeline \nresulting in regression testing occurring \nfrequently. As new automated \nfunctional tests are created they will be \nadded to the regression suite.\nIf a defect is injected into existing code, \nthe automated regression suite should \ndetect it. Any defects that slip \nundetected  into production should \nhave an automated test added when \nthey \nare fixed.\nDefect analysis\nAnalysing defects can help to identify \nunderlying patterns and trends that can \nbe used to correct the root cause. \nIf defects continue in certain areas, \ndeeper analysis of both the design \nand the tests is required.\nDefect prevention cont.\nEngineering and architecture\nBehaviour driven design (BDD)\nBehaviour driven design is a process \nthat encourages collaboration among \ndevelopers, QA, and non-technical or \nbusiness participants. BDD style tests \nuse examples to talk through how an \napplication should behaves, and  \nimportantly having conversations about \nthose examples designed. In so doing, \nBDD ensures all development projects \nremain focused on delivering what the \nbusiness actually needs while meeting \nall requirements of the user. \nAdopting a BDD approach to testing \nencourages specifications to be more \nhuman readable. BDD style tests are \nvery easy to understand regardless of \ntechnical ability. BDD style tests can be \ncombined with TDD frameworks.\nQA / BA / UXers pairing on analysis\nWhen Quality Analysts (QAs), Business \nAnalysts (BAs) and User Experience \nDesigners (UXers) pair on writing \nstories or review them before \ndevelopment work is done, edge cases \ncan be defined before coding starts. \nThe boundary analysis of a requirement \nhelps the implementation rather than \nonly driving the testing. This reduces \nthe amount of defects found late in \ndevelopment cycle, preventing \nunwanted rework.']","Intellectual Property 122 and Intellectual Property 106 work together to maintain software security through a combination of proactive security measures and automated testing. IP 122 focuses on building security into every aspect of the software development process, from identifying security scope and acceptance criteria in user stories, to building security into application code, data models, pipelines, and infrastructure. It also emphasizes the importance of having the right security capabilities across all roles in the team and using tooling and exploratory testing to find and fix vulnerabilities. On the other hand, IP 106 emphasizes the creation of automated acceptance tests for each requirement as it is being developed, resulting in an automated regression test suite that is continuously run in the CI pipeline. This allows for frequent regression testing and the early detection of any defects that may have been injected into the existing code. Together, these practices ensure that security is built into the software from the ground up and that any vulnerabilities are quickly detected and addressed.",multi_hop_specific_query_synthesizer
"How do the practices of Thoughtworks, such as implementing functionality as vertical slices, contribute to managing parallel streams of work and increasing the speed of software delivery?","['<1-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 87\nThis section contains a set of sensible \ndefault practices that Thoughtworks \napply to deliver high quality, \nmaintainable software.\nThis is not a rule book or recipe for \nsuccess. There are contexts where \nsome of the practices need to be \nadapted to the situation, simply do not \nfit, or can not be applied.\nThe Sensible Default Practices are \nbased on the values of faster feedback, \nrepeatability, and simplicity.\nBased on the experience of our delivery \nteams, we believe that Thoughtworks’ \nsensible default practices:\n● Increase both delivery quality and \ndelivery speed, as we acknowledge \nthat these two components support \nand enable each other\n● Enable highly autonomous and \nhighly resilient teams\n● Develop software incrementally \nwith a focus on continuously \ndemonstrating added value \nto customers\nOur engineering sensible \ndefaults practices\nEngineering and architecture\nThe Sensible Default Practices\n● Frequent and Continuous Integration\n● Test Driven Development\n● Pair development\n● Build Security In\n● Fast and Verified Automated Build\n● Automated Deployment Pipeline\n● Early and Continuous Deployment\n● Quality and Debt effectively \nmanaged\n● Build for Production\nCore \nvalues\nWeb and Mobile\nDevelopment \nData\nEngineering\nVertical\nslices\nSimple\ndesign\nClean\ncode\nSimplicity Repeatability Pair\nprogramming\nRefactoringTest driven\ndesign \nContinuous\nintegration\nMicroservice\nArchitecture\nCloud and\nDevOps\nCollective\ncode\nownership\nAutomate\nrepetitive\ntasks\nFast\nfeedback', '<2-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 99\nHow many parallel streams of work can \nyour codebase support? Factors to help \nyou decide this include \n● how small the codebase is, \n● how varied the work is, \n● dependencies on other teams and\n● access to specialists. \nIt is an important consideration as this \nnumber dictates the size of the team, \nthe work sequencing and ultimately \nthe speed of delivery.\nThere are practices that we adopt to \nhelp increase the number of parallel \nstreams, including:\nContinuous integration\nThe core idea of continuous integration, \nconstantly integrating changes from all \ndevelopers with one another, is key to \nmanaging parallel streams of work and \nenabling multiple developers to \nefficiently work in a single codebase \nsimultaneously. By constantly \nintegrating changes with one another, \nthe risk of making conflicting changes is \nreduced, and the impact of any conflicts \nthat do arise is limited due to the small \namount of changes involved. \nFurthermore, running automated tests \nand other checks on every change \nensure that all developers’ changes \nwork together correctly, and any issues \nintroduced can be addressed quickly.\nParallel streams of work\nEngineering and architecture\nFeature toggles\nWhen working with continuous \nintegration, there’s often a need to \nintegrate changes that are not yet \nready to be seen by a user - either \nbecause they are incomplete, rely on \nother features being added or changed \nas well, or are waiting for a business \nevent before release. Feature toggles \nprovide a mechanism to hide \nincomplete work from users.  \nVertical slices\nImplementing functionality as vertical \nslices (where all changes required for \na feature are implemented as one user \nstory), rather than horizontal slices \n(where all changes for a range of \nfunctionality in a single area of the \ncodebase are implemented as one \nstory) helps parallelise work. This is \nbecause most of the functionality for \neach user story can be worked on \nindependently, rather than relying on \na single story to be complete before \nothers can be started.\n']","Thoughtworks adopts several practices to manage parallel streams of work and increase the speed of software delivery. One of these practices is implementing functionality as vertical slices, where all changes required for a feature are implemented as one user story, rather than horizontal slices where all changes for a range of functionality in a single area of the codebase are implemented as one story. This approach helps parallelize work because most of the functionality for each user story can be worked on independently, rather than relying on a single story to be complete before others can be started. This practice, along with others like continuous integration, contributes to managing parallel streams of work and enabling multiple developers to efficiently work in a single codebase simultaneously.",multi_hop_specific_query_synthesizer
How does the process of shifting accessibility left incorporate testing to ensure robust user experiences?,"['<1-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 83\nShifting accessibility left means making sure that accessibility is considered from \nthe very beginning of the design process during discovery, rather than an \nafterthought or by performing a one-off audit. \nOur approach ensures that accessibility is built into the design of a product, \ndevice, or service, rather than being added on at the end of the project, which is \noften more expensive and time-consuming. \nShift accessibility left\nDiscovery & \nInception\nAccessibility  \n Activities\nRequirements \nAnalysis Design Architecture \nDesign\nCoding & \nTesting\nDiscovery with \naccessibility in mind \nResearch with \ndisabled users \nAccessibility \nobjectives\nHigh-level \naccessibility \nrequirements \nand sizing\nPersonas with \ndisability overlays\nAccessibility \nrequirements \nanalysis\nRisk prioritisation\nProduct design  \nwith accessibility in \nmind\nAccessibility \nannotations on \ndesigns \nApplication \narchitecture \nuniversal design \nand review\nApplication \ndeployment solution \nuniversal design \nand review\nJoint user story \naccessibility kick-off\nAutomatic source \ncode scan (linters) \nFast, automated  \ntests addressing \naccessibility \nAccessibility sign-off \nduring each iteration\nUse tooling\nManual accessibility \ntesting \nTest with users who \nhave different \ndisabilities\n AGILE DELIVERY LIFE CYCLE\nRisk Time CostReduce\nShifting accessibility activities left and introducing them early and throughout the delivery \nlifecycle will ensure inclusive design, continuous feedback and early detection\nShift\nLeft\nAccessibility', '<2-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 85\nWe establish sensible default accessibility practices within teams and by following \nthese practices we ensure we build robust user experiences. Our approach to \nshifting accessibility left and making digital content accessible has many benefits. \nDigital accessibility is an important issue that affects people with disabilities and \nimpairments, and has many benefits for society as a whole as it benefits everyone. \nBy making digital content and services accessible, we can help to ensure that \neveryone can access and use content, regardless of their abilities or disabilities. This \npromotes inclusion and equality,  provides a springboard for innovation and benefits \nbusinesses and organizations by making their content and services available to a \nbroader customer audience.\nAccessibility sensible defaults\nAccessibility\nDesign for all users and test with user with disabilities \nthroughout the project lifecycle.\nTest with a screen reader to understand how the user \ninterface(UI) will be experienced by users who cannot see the \nUI. \nCheck page structure is visually and semantically correct. A \npage that has a correct visual structure will be easier for all \nusers to understand and navigate, regardless of their abilities \nor disabilities. \nUse only a keyboard to navigate to identify any potential \nbarriers or issues that users may encounter\nCheck colour contrast to ensure that text and background \ncolors have enough contrast to make the content easy to read \nfor people with visual impairments.\nUse tooling and automate testing the majority of \naccessibility issues that would cause users to not be able to \ninteract with an application can be discovered through fast \nautomated tests addressing accessibility\n']","The process of shifting accessibility left incorporates testing by considering accessibility from the very beginning of the design process. This approach ensures that accessibility is built into the design of a product, device, or service, rather than being added on at the end of the project. Testing activities include automatic source code scans, fast automated tests addressing accessibility, and manual accessibility testing. Additionally, testing with users who have different disabilities is also part of the process. This approach ensures inclusive design, continuous feedback, and early detection of potential issues.",multi_hop_specific_query_synthesizer
How does Intellectual Property 116's security culture and Intellectual Property 60's project management considerations relate to each other?,"['<1-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 116\nRelevant examples\nOur culture of learning, continuous \nimprovement, and trust supports a \nblameless approach to incident \nresponses and postmortems. We send \nregular Go Wrong emails to share the \nlessons of past incidents, as one part of \na larger strategy that helps our \nconsultants and operations staff learn \nfrom real events and relatable contexts, \nrather than pre-canned scenarios or \nexercises.\nContinuous engagement\nWe recognise that security education \nand secure delivery and work practices \nare an ongoing process, not a “one and \ndone”. Security needs development and \nmaintenance throughout the Software \nDevelopment Life Cycle, so our \neducation practices are designed to \ncomplement this.\nSecurity education\nAll Thoughtworkers participate in an \ninternal training program called AppSec \n101. This instructor-led course covers \nmany of the common risks that delivery \nteams face, and teaches a set of \nfundamental principles and practices to \nproactively mitigate security threats.\nApplying our enduring software \nengineering practices to the full stack – \nincluding infrastructure as code – is \ncritical to building and maintaining \napplications that are secure by default.\nCreating a security culture\nSecurity\nThe importance of the Security \nChampion role\nSecurity Champions are delivery team \nmembers who take on an additional role \nof actively advocating for good security \npractices among their team. Their \nprimary duties are to promote \nawareness of the issues, drive good \npractices, and help build capability \naround security, in all its forms.\nSecurity Champions are not expected to \nbe security experts, and are not solely \nresponsible or accountable for security. \nThey support the InfoSec team by \nproviding on-the-ground context for \neach project, and are supported by the \nInfoSec team in turn when it comes to \nincident response, education, \nresources, and project-specific security \nguidance. Security Champions meet \nwith InfoSec SMEs at least monthly to \ndiscuss concerns and issues.\nThoughtworks acknowledges that it is \nnot always easy to maintain a strong \nsecurity mindset throughout the \ncreative process of building a new \nsolution, so the security champion role \nis one way of bringing this mindset into \nthe ongoing work of the team, by \nregularly reminding the team to \nconsider security during the \ndevelopment lifecycle, sharing news \nand updates, and supporting the team \nto explore security-related questions \nand interests.', '<2-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 60\nOther factors to be considered \nwhen applying the effort forecast \nto a project plan\nWhen devising a project plan, it is \nexpected that further inputs should be \nconsidered as they are likely to increase \nthe effort required. The factor by which it \naffects the estimates needs to be \ncalculated taking into consideration \ncircumstances and processes that are \nspecific to the client. These can include:\n● Leave, both planned and unplanned \nof team members, dependency teams \nand stakeholders\n● Dependencies’ lead time\n● Story endorsement lead time with the \nbusiness prior to development\nOther estimation factors\nProject and iteration management\n● Story sign off lead time\n● Architectural sign offs and gates\n● Environment constraints and potential \ndependencies on single individuals\n● Shared environment constraints\n● SME availability\n● User testing and validation\n● Familiarity of the tech stack to the \nclient or the team\n● Time effort required to go from code \ncomplete to production \n● Scope growth outside already \nidentified scope\n● Inception and iteration zero period \n● Roles required for the project as \noutlined in Working With Clients']","Intellectual Property 116's security culture and Intellectual Property 60's project management considerations relate to each other in the context of software development. IP 116 emphasizes the importance of continuous security education, secure delivery practices, and the role of Security Champions in promoting good security practices. These elements are crucial in maintaining secure applications throughout the Software Development Life Cycle. On the other hand, IP 60 highlights various factors that need to be considered when planning a project, such as dependencies' lead time, environment constraints, and user testing. These factors can directly impact the security aspects emphasized in IP 116, as they can influence the time and resources available for implementing and maintaining secure practices. Therefore, both IPs together provide a comprehensive view of the considerations necessary for secure and efficient software development.",multi_hop_specific_query_synthesizer
How you do predicting delivery when you got scope size and raw velocity and how trade-off sliders help in making decisions about scope?,"['<1-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 59\nPredicting delivery\nNow you have an estimated backlog, \na team velocity, and an understanding \nof the RAKU’s  associated with the \nproject, you have the ingredients \nto forecast.\nThe scope size and raw velocity are \ncalculated to establish a baseline \neffort forecast.\nDelivery Release Plan\nFor a more realistic forecast the \nfollowing inputs are required:\nBaseline scope with 3 projections - \n25%, 50% and 75%. (Min, Likely, and \nHigh ranges)\nCapacity modelling of up to 18% across \nthe project to account for leave, public \nholidays etc. Modelling a +/- 10% \nagainst estimated velocity as well.\nThis will give a range between highly \noptimistic and pessimistic (also known \nas realistic). The burn-up will show \nthese ranges. As the project progresses \nand the spreadsheet continually \nupdated with actual data, more refined \nmodelling can occur. \nThe burnup chart below is an example \nof how a new project burn-up looks.\nEstimation forecast\nScope Size 235 points\nVelocity 20 points per \niteration\nRaw effort \nForecast\n12 iterations\nExample effort forecast table\nWarning!\nThis is not a delivery estimate or \nforecast, it’s the starting point. Things \nwe know from the thousands of \nprojects we’ve worked on, final scope \nsize can be anywhere between \n50-100% more than the original \nestimate.\nAnd the average velocity estimate can \noften be optimistic and doesn’t often \naccount for reduced capacity due to \nleave, or organizational overhead such \nas meetings etc. For more realistic \nestimates delivery release plans are \ncreated and used as the basis of \nregular reporting.\nProject and iteration management', '<2-hop>\n\n© 2023 Thoughtworks | Thoughtworks Pre-existing Intellectual Property 37\nTrade-off sliders are a quick way to \nframe competing priorities within the \ncontext of time, budget and other \nnegotiable constraints. They are used to \nhelp project stakeholders identify what \nis most important. Trade-offs can \ninform how work is prioritised and the \ndecisions made during delivery.\nThis activity is typically done during \ninception with the core team, \nstakeholders and other interested \nparties, but can be revisited throughout \nthe delivery as priorities change.\nTypical trade-off sliders are:\n1. Time\n2. Cost\n3. Scope\n4. User Experience\nAny project specific dimensions (eg \namount of migration) are added as the \nneed arises. \nThe agreed trade-off sliders are \nordered in priority from least negotiable \n(left hand side) to most negotiable \n(Right hand side).\nThe trade-off sliders are used by the \nproject team to drive decisions. For \nexample, if Scope is lower in priority \nthan Time (ie Scope is more negotiable \nthan Time), scope can be removed to \nallow the project to deliver on time.\nTrade off sliders informing \nscope decisions\nLeast \nNegotiable\nMost \nNegotiable\nQuality\nScope\nUsability\nTime\nBudget\nProject and iteration management']","Predicting delivery involves using the estimated backlog, team velocity, and understanding of the project's risks. The scope size and raw velocity are calculated to establish a baseline effort forecast. For a more realistic forecast, inputs such as baseline scope with 3 projections (25%, 50%, and 75%), capacity modelling of up to 18% across the project, and modelling a +/- 10% against estimated velocity are required. This gives a range between highly optimistic and pessimistic. As the project progresses and the spreadsheet is continually updated with actual data, more refined modelling can occur. However, it's important to note that the final scope size can be anywhere between 50-100% more than the original estimate. Trade-off sliders are used to frame competing priorities within the context of time, budget, and other negotiable constraints. They help project stakeholders identify what is most important and can inform how work is prioritised and the decisions made during delivery. For example, if Scope is lower in priority than Time, scope can be removed to allow the project to deliver on time.",multi_hop_specific_query_synthesizer
